@model TBAM.Models.TestFormViewModel

@{
    ViewData["Title"] = "Test Batch Entry";
    Layout = "_Layout";
    string Role = (string)Context.Session.GetString("userRole");
}

<div class="container-fluid" style="margin-top: 20px;">
    <div class="card">
        <div class="card-header text-center">
            <h2 class="mb-0">@ViewData["Title"]</h2>
        </div>
        <div class="card-body">
            <form asp-action="SubmitTestForm" method="post">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <input type="hidden" name="RefNo" class="form-control" required />
                            <label for="PurposeOfTesting">Purpose of Testing</label>
                            <select id="PurposeOfTesting" name="PurposesOfTesting[0]" class="form-control" @(Role == "QC" ? "disabled" : "")>
                                @foreach (var purpose in Model.PurposesOfTesting)
                                {
                                    <option value="@purpose">@purpose</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="Plant">Plant</label>
                            <select id="Plant" name="Plants[0]" class="form-control" @(Role == "QC" ? "disabled" : "")>
                                @foreach (var plant in Model.Plants)
                                {
                                    <option value="@plant">@plant</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="TestDetails">Test Details</label>
                    <textarea id="TestDetails" name="TestDetails" class="form-control" required @(Role == "QC" ? "readonly" : "")></textarea>
                </div>

                <h3 class="mt-4">Line Items</h3>
                <table id="lineItemsTable" class="table table-bordered mt-3" style="width: 100%;     table-layout: fixed;">
                    <thead class="thead-light">
                        <tr>
                            <th>Product Code</th>
                            <th>Product Name</th>
                            <th>Workcentre</th>
                            <th>Quantity</th>
                            <th>Remarks</th>
                            @if (Role == "Initiator")
                            {
                                <th>Actions</th>
                            }
                        </tr>
                    </thead>
                    <tbody>

                    </tbody>
                </table>
                @if (Role == "Initiator")
                {
                    <button id="addLineItem" type="button" class="btn btn-primary">Add Line Item</button>
                

                <hr />
 
                    <button id="backButton" type="button" class="btn btn-secondary"
                            onclick="backButtonClicked()">
                        Back
                    </button>
                    <button id="clickSubmit" type="submit" class="btn btn-success"
                            onclick="return validateForm()">
                        Save
                    </button>
                }
            </form>
        </div>
    </div>
</div>

           

<style>
    .main-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9; /* add a light gray background color */
    }

    .card {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* add a subtle box shadow */
    }

    .card-header {
        background-color: #337ab7; /* add a blue background color to the card header */
        color: #ffffff; /* add white text color to the card header */
    }

    .card-body {
        padding: 20px; /* add some padding to the card body */
    }

    /* add some spacing between elements */
    .form-group {
        margin-bottom: 20px;
    }

    /* style the table */
    #lineItemsTable {
        width: 100%;
        border-collapse: collapse;
    }

    #lineItemsTable th, #lineItemsTable td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
    }

    #lineItemsTable th {
        background-color: #f0f0f0;
    }
</style>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script type="text/javascript">

    var lineItemCounter = 0;
    var formChanged = false;
    console.log("script running")
    $(document).ready(async function () {
        var productCodeToNameMap = {};
        var RefNo = '@Model.RefNo';

        // event listeners to detect form changes
        $('input, select, textarea').on('change', function () {
            formChanged = true;
        });



        if (RefNo != "") {
            var testdetails = '@Model.TestDetails';
            var selectedPlant = '@Model.SelectedPlant';
            var selectedPurposesOfTesting = '@Model.SelectedPurposeofTesting';

            console.log("selectedPurposesOfTesting ", selectedPurposesOfTesting)

            $(this).find('input[name="RefNo"]').val(RefNo);
            $(this).find('textarea[name="TestDetails"]').val(testdetails);
            $(this).find('select[name="Plant[0]"]').val(testdetails);
            $(this).find('select[name="PurposesOfTesting[0]"]').val(selectedPurposesOfTesting);
            if ($('#lineItemsTable tbody tr').length === 0) {
                $('#lineItemsTable tbody').append('<tr id="no-products-message"><td colspan="6">No product added.</td></tr>');
            }
            else
                $('#no-products-message').remove();

        }



    @foreach (var product in Model.Products)
    {
        @:productCodeToNameMap["@product.ProductCode"] = "@product.ProductName";
    }
            // Populate line items from model
    @if (Model.LineItems != null && Model.LineItems.Count > 0)
    {
        @:var lineItems = @Html.Raw(Json.Serialize(Model.LineItems));
        @:lineItems.forEach(function (lineItem, index) {
        @:var productOptions = Object.keys(productCodeToNameMap).map(code => `<option value="${code}" ${code === lineItem.productCode ? 'selected' : ''}>${code}</option>`).join('');
        @:var productNameOptions = Object.keys(productCodeToNameMap).map(code => `<option value="${productCodeToNameMap[code]}" ${productCodeToNameMap[code] === lineItem.productName ? 'selected' : ''}>${productCodeToNameMap[code]}</option>`).join('');
        @:var workcentreOptions = [@foreach (var workcentre in Model.Workcentres)
        {
            <text>'@workcentre',</text>
        }];
        @:workcentreOptions = workcentreOptions.map(workcentre => `<option value="${workcentre}" ${workcentre === lineItem.workcentre ? 'selected' : ''}>${workcentre}</option>`).join('');
        @:$('<tr id="lineItemRow' + index + '"><td>' +
        @:'<select name="LineItems[' + index + '].ProductCode" class="form-control product-code-select" required>' + productOptions + '</select>' +
        @:'</td><td>' +
        @:'<select name="LineItems[' + index + '].ProductName" class="form-control product-name-select" style="pointer-events: none;" required>' + productNameOptions + '</select>' +
        @:'</td><td>' +
        @:'<select name="LineItems[' + index + '].Workcentre" class="form-control" required>' + workcentreOptions + '</select>' +
        @:'</td><td>' +
        @:'<input type="number" min="1" value="' + lineItem.quantity + '" name="LineItems[' + index + '].Quantity" class="form-control" required/>' +
        @:'</td><td>' +
        @:'<input type="text" value="' + lineItem.remarks + '" name="LineItems[' + index + '].Remarks" class="form-control" required/>' +
        @:'</td>' +
        @if (Role == "Initiator")
        {
            @:'<td>'+
            @:'<button type="button" class="btn btn-danger" onclick="removeLineItem(' + lineItemCounter + ');">Delete</button>' +
            @:'</td>'+
        }
        @:'</tr>').appendTo('#lineItemsTable tbody');
        @:lineItemCounter++;
        @:});
    }
            $('#lineItemsTable').on('change', 'select[name^="LineItems"][name$="ProductCode"]', function () {
                console.log("on change")
                var code = $(this).val();
                $(this).closest('tr').find('select[name^="LineItems"][name$="ProductName"]').val(productCodeToNameMap[code]);
            });

        $('#addLineItem').click(function () {
            var selectedProducts = {};
            $('select[name^="LineItems"][name$="ProductCode"]').each(function () {
                var code = $(this).val();
                var name = $(this).closest('tr').find('select[name^="LineItems"][name$="ProductName"]').val();
                selectedProducts[code] = name;
            });

            var allProductCodes = Object.keys(productCodeToNameMap);
            var availableProductCodes = allProductCodes.filter(code => !(code in selectedProducts));

            if (availableProductCodes.length === 0) {
                alert("All product codes are already selected.");
                return false;
            }

            var productOptions = availableProductCodes.map(code => `<option value="${code}">${code}</option>`).join('');
            var productNameOptions = availableProductCodes.map(code => `<option value="${productCodeToNameMap[code]}" >${productCodeToNameMap[code]}</option>`).join('');

        var availableWorkcentres = @Html.Raw(Json.Serialize(Model.Workcentres));
        var workcentreOptions = '';
        availableWorkcentres.forEach(function (workcentre) {
            workcentreOptions += '<option value="' + workcentre + '">' + workcentre + '</option>';
        });

        formChanged = true; // Set formChanged to true when a line item is added


        $('<tr id="lineItemRow' + lineItemCounter + '"><td>' +
            '<select name="LineItems[' + lineItemCounter + '].ProductCode" class="form-control product-code-select" required>' + productOptions + '</select>' +
            '</td><td>' +
            '<select name="LineItems[' + lineItemCounter + '].ProductName" class="form-control product-name-select" style="pointer-events: none;" required>' + productNameOptions + '</select>' +
            '</td><td>' +
            '<select name="LineItems[' + lineItemCounter + '].Workcentre" class="form-control" required>' + workcentreOptions + '</select>' +
            '</td><td>' +
            '<input type="number" min="1" value="1" name="LineItems[' + lineItemCounter + '].Quantity" class="form-control" required/>' +
            '</td><td>' +
            '<input type="text" name="LineItems[' + lineItemCounter + '].Remarks" class="form-control" required/>' +
            '</td>' +
            @if (Role == "Initiator")
            {
                @:'<td>' +
                @:'<button type="button" class="btn btn-danger" onclick="removeLineItem(' + lineItemCounter + ');">Delete</button>' +
                @:'</td>'+
            }
            '</tr>').appendTo('#lineItemsTable tbody');
        lineItemCounter++;

        $('#no-products-message').remove();
            return false;
        });

        @if (Role != "Initiator")
        {
            @:$('select[name^="LineItems"], input[name^="LineItems"]').attr('disabled', 'disabled');
            @:$('button.btn-danger').hide();
        }
    });

    // Add a message "No product added." when no line items are present
    if ($('#lineItemsTable tbody tr').length === 0) {
        $('#lineItemsTable tbody').append('<tr id="no-products-message"><td colspan="6">No product added.</td></tr>');
    }

    async function removeLineItem(index) {
        await $('#lineItemRow' + index).remove();

        // Re-index the remaining items
        $('#lineItemsTable tbody tr').each(function (newIndex) {
            $(this).attr('id', 'lineItemRow' + newIndex);
            $(this).find('select[name^="LineItems"][name$="ProductCode"]').attr('name', 'LineItems[' + newIndex + '].ProductCode');
            $(this).find('select[name^="LineItems"][name$="ProductName"]').attr('name', 'LineItems[' + newIndex + '].ProductName');
            $(this).find('select[name^="LineItems"][name$="Workcentre"]').attr('name', 'LineItems[' + newIndex + '].Workcentre');
            $(this).find('input[name^="LineItems"][name$="Quantity"]').attr('name', 'LineItems[' + newIndex + '].Quantity');
            $(this).find('input[name^="LineItems"][name$="Remarks"]').attr('name', 'LineItems[' + newIndex + '].Remarks');
            $(this).find('button.btn-danger').attr('onclick', 'removeLineItem(' + newIndex + ');');
        });

        lineItemCounter = $('#lineItemsTable tbody tr').length;

        if ($('#lineItemsTable tbody tr').length === 0) {
            $('#lineItemsTable tbody').append('<tr id="no-products-message"><td colspan="6">No product added.</td></tr>');
        }
    }
    function backButtonClicked() {
        if (formChanged) {
            if (confirm("You have unsaved changes. Are you sure you want to leave this page?")) {
                window.history.back();
            }
        } else {
            window.history.back();
        }
    }

    function validateForm() {
        if ($('#lineItemsTable tbody tr').length === 1 && $('#no-products-message').length > 0) {
            alert("No product added.");
            return false;
        }
        return true;
    }
    
</script>
